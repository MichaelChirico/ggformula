% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gf_functions.R
\name{gf_ribbon}
\alias{gf_ribbon}
\alias{gf_curve}
\alias{gf_segment}
\alias{gf_linerange}
\alias{gf_pointrange}
\alias{gf_crossbar}
\alias{gf_errorbar}
\alias{gf_errorbarh}
\alias{gf_rect}
\title{Multivariate gf_ plotting functions}
\usage{
gf_ribbon(object = NULL, .formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_curve(object = NULL, .formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_segment(object = NULL, .formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_linerange(object = NULL, .formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_pointrange(object = NULL, .formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_crossbar(object = NULL, .formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_errorbar(object = NULL, .formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_errorbarh(object = NULL, .formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_rect(object = NULL, .formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)
}
\arguments{
\item{object}{When chaining, this holds an object produced in the earlier portions
of the chain.  Most users can safely ignore this argument.
See details and examples.}

\item{.formula}{A formula describing the manditory aesthetics and possibly other
aesthetics in a form like \code{ y + ymin + ymax ~ x + color:red + fill:gray50 + alpha:0.5}}

\item{data}{A data frame with the variables to be plotted}

\item{geom}{A way to specify ggplot geoms that are not aliased to gf functions.}

\item{verbose}{If \code{TRUE} print the ggplot2 command in the console.}

\item{add}{If \code{TRUE} then construct just the layer with no frame.  The result
can be added to an existing frame.}

\item{...}{Other arguments such as \code{position="dodge"}.}

\item{show.help}{If \code{TRUE}, display some minimal help.  In particular,
the help will show (a) which geom from \pkg{ggplot2} is used,
(b) how aesthetics are assigned based on \code{formula}, and (c)
any default values of arguments to the geom.}
}
\description{
These functions provide a formula interface to \code{ggplot2} and
various geoms. The formula interface is similar to the one used
for \pkg{lattice} plots, but more expressive, and consistent with
its use in modeling functions like \code{\link{lm}()}.  These functions
can be used to create a complete plot, or they can be chained together
using the pipe operator from \pkg{magrittr} to create multi-layer plots.
The functions generate a \code{ggplot2} command string which can be
displayed by setting \code{verbose = TRUE} as an argument.
}
\details{
Formulas must specify the required aesthetics of the underlying
\pkg{ggplot2} function.  Use, for example,  \code{gf_ribbon(show.help = TRUE)}
to see the formula specification required (along with any other default values
passed to the geom).
Additional terms of the form \code{attribute::value} map \code{attribute}
to \code{value}.
Additional terms of the form \code{attribute:value} will map \code{attribute}
to \code{value} if \code{value} is the name of a variable in \code{data}, else
\code{attribute} will be set to the constant \code{value}.
Attributes can also be set by including optional arguments of the form
\code{attribute = value}.

In formulas of the form \code{A | B}, \code{B} will be used to form facets using
\code{link{facet_wrap}()} or \code{\link{facet_grid}()}.
This provides an alternative to
\code{\link{gf_facet_wrap}()} and
\code{\link{gf_facet_grid}()} that is terser and may feel more familiar to users
of \pkg{lattice}.
}
\examples{
gf_ribbon(show.help = TRUE)
if (require(weatherData) & require(dplyr)) {
Temps <- NewYork2013 \%>\% mutate(city = "NYC") \%>\%
bind_rows(Mumbai2013 \%>\% mutate(city = "Mumbai")) \%>\%
bind_rows(London2013 \%>\% mutate(city = "London")) \%>\%
  mutate(date = lubridate::date(Time),
         month = lubridate::month(Time)) \%>\%
  group_by(city, date) \%>\%
  summarise(
    hi = max(Temperature, na.rm = TRUE),
    lo = min(Temperature, na.rm = TRUE),
    mid = (hi + lo)/2
  )

gf_ribbon(lo + hi ~ date + fill:city, data = Temps, alpha = 0.4) \%>\%
   gf_theme(theme = theme_minimal)
gf_linerange(lo + hi + color:mid ~ date | city ~ ., data = Temps) \%>\%
  gf_refine(scale_colour_gradientn(colors = rev(rainbow(5))))
gf_ribbon(lo + hi ~ date | city ~ ., data = Temps)
# Chaining in the data
Temps \%>\% gf_ribbon(lo + hi ~ date, alpha = 0.4) \%>\%
  gf_facet_grid(city ~ .)
}
}
\seealso{
\code{\link{gf_histogram}()}, \code{\link{gf_point}()}, \code{\link{gf_abline}()}, \code{\link{gf_refine}()},
and the other functions documented with these functions.
}
