% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gf_functions.R
\name{gf_curve}
\alias{gf_curve}
\alias{gf_segment}
\alias{gf_ribbon}
\alias{gf_linerange}
\alias{gf_pointrange}
\alias{gf_crossbar}
\alias{gf_errorbar}
\alias{gf_errorbarh}
\alias{gf_rect}
\title{Multivariate gf_ plotting functions}
\usage{
gf_curve(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...)

gf_segment(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...)

gf_ribbon(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...)

gf_linerange(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...)

gf_pointrange(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...)

gf_crossbar(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...)

gf_errorbar(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...)

gf_errorbarh(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...)

gf_rect(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...)
}
\arguments{
\item{object}{When chaining, this holds an object produced in the earlier portions
of the chain.  Most users can safely ignore this argument.
See details and examples.}

\item{formula}{A formula describing the manditory aesthetics and possibly other
aesthetics in a form like \code{ y + ymin + ymax ~ x + color:red + fill:gray50 + alpha:0.5}}

\item{data}{A data frame with the variables to be plotted}

\item{geom}{A way to specify ggplot geoms that are not aliased to gf functions.}

\item{verbose}{If \code{TRUE} print the ggplot2 command in the console.}

\item{add}{If \code{TRUE} then construct just the layer with no frame.  The result
can be added to an existing frame.}

\item{...}{Other arguments such as \code{position="dodge"}.}
}
\description{
These functions provide a formula interface to \code{ggplot2} and
various geoms. For plots with just one layer, the formula interface
is more compact and is consistent with modeling and mosaic notation.
The functions generate a \code{ggplot} command string which can be displayed by
setting \code{verbose = TRUE} as an argument.
}
\examples{
if (require(weatherData) & require(dplyr)) {
Temps <- NewYork2013 \%>\% mutate(city = "NYC") \%>\%
bind_rows(Mumbai2013 \%>\% mutate(city = "Mumbai")) \%>\%
bind_rows(London2013 \%>\% mutate(city = "London")) \%>\%
  mutate(date = lubridate::date(Time),
         month = lubridate::month(Time)) \%>\%
  group_by(city, date) \%>\%
  summarise(
    hi = max(Temperature, na.rm = TRUE),
    lo = min(Temperature, na.rm = TRUE),
    mid = (hi + lo)/2
  )

gf_ribbon(lo + hi ~ date + fill:city, data = Temps, alpha = 0.4) \%>\%
   gf_theme(theme = theme_minimal)
gf_linerange(lo + hi + color:mid ~ date, data = Temps) \%>\%
  gf_facet_grid(city ~ .) \%>\%
  gf_refine(scale_colour_gradientn(colors = rev(rainbow(5))))
gf_ribbon(lo + hi ~ date, data = Temps, alpha = 0.4) \%>\%
  gf_facet_grid(city ~ .)
# Chaining in the data
Temps \%>\% gf_ribbon(lo + hi ~ date, alpha = 0.4) \%>\%
  gf_facet_grid(city ~ .)
}
}
\seealso{
\code{\link{gf_point}()}, \code{\link{gf_histogram}()}, \code{\link{gf_abline}()}.
}
