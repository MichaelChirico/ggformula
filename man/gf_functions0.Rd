% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gf_functions.R
\name{gf_function}
\alias{gf_function}
\alias{gf_fun}
\alias{gf_coefline}
\title{gf_ functions with no formula part}
\usage{
gf_function(object, fun, ...)

gf_fun(object, formula, ...)

gf_coefline(object = NULL, formula = NULL, coef = NULL, model = NULL,
  ...)
}
\arguments{
\item{object}{When chaining, this holds an object produced in the earlier portions
of the chain.  Most users can safely ignore this argument.
See details and examples.}

\item{fun}{A function.}

\item{...}{Other arguments such as \code{position="dodge"}.}

\item{formula}{A formula describing a function.  See examples.}

\item{coef}{A numeric vector of length at least 2, treated as intercept and slope.
Additional components, if any, are ignored (with a warning).}

\item{model}{An object with a method for \code{coef()} that returns a
numeric vector, the first two elements of which are intercept and slope.
This is equivalent to \code{coef = coef(model)}.}
}
\value{
a gg object
}
\description{
\code{ggformula} functions provide a formula interface to \code{ggplot2} and
various geoms. But a few functions o not use a formula and use other types of
inputs instead.  These are documented here.
}
\details{
\code{gf_function()} and \code{gf_fun()} provide to different interfaces for creating a layer
that contains the graph of a function.
\code{gf_coefline()} creates a layer contaiing a line.  The line can be described by
specifying its slope and intercept or by providing a model from which these can be extracted.
}
\examples{
if (require(mosaicData)) {
  gf_histogram(..density.. ~ age, data = HELPrct, binwidth = 3, alpha = 0.6) \%>\%
    gf_function(fun = dnorm,
      args = list(mean = mean(HELPrct$age), sd = sd(HELPrct$age)),
      color = "red")
}
gf_point(Sepal.Length ~ Sepal.Width, data = iris) \%>\%
gf_fun(5 + 3 * cos(10 * x) ~ x)
# Utility bill is quadratic in month?
if (require(mosaic)) {
  f <- makeFun(lm(totalbill ~ poly(month, 2), data = Utilities))
  gf_point(totalbill ~ month, data = Utilities, alpha = 0.6) \%>\%
    gf_fun(f(m) ~ m, color = "red")
  }
mtcars.model <- lm(mpg ~ wt, data = mtcars)
gf_point(mpg ~ wt, data = mtcars) \%>\%
  gf_coefline(model = mtcars.model, alpha = 0.6) \%>\%
  gf_hline(yintercept = 20, color = "red", alpha = 0.4) \%>\%
  gf_vline(xintercept = 3, color = "navy", alpha = 0.4)
# Chaining in the data
mtcars \%>\% gf_point(mpg ~ wt, data = mtcars) \%>\%
  gf_coefline(model = mtcars.model, alpha = 0.6, col = "red")
}
