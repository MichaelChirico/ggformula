% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gf_functions.R
\name{gf_function}
\alias{gf_function}
\alias{gf_fun}
\alias{gf_coefline}
\title{gf_ functions with no formula part}
\usage{
gf_function(object, fun, ...)

gf_fun(object, formula, ...)

gf_coefline(object = NULL, formula = NULL, coef = NULL, model = NULL,
  ...)
}
\arguments{
\item{object}{When chaining, this holds an object produced in the earlier portions
of the chain.  Most users can safely ignore this argument.
See details and examples.}

\item{...}{Other arguments such as \code{position="dodge"}.}

\item{coef}{A numeric vector of length at least 2, treated as intercept and slope.
Additional components, if any, are ignored (with a warning).}

\item{model}{An object with a method for \code{coef()} that returns a
numeric vector, the first two elements of which are intercept and slope.
This is equivalent to \code{coef = coef(model)}.}

\item{data}{A data frame with the variables to be plotted}

\item{gformula}{mostly ignored,
but the environment of this object determines
where the \pkg{ggplot2} code is evaluated.}

\item{add}{If \code{TRUE} then construct just the layer with no frame.  The result
can be added to an existing frame.}

\item{verbose}{If \code{TRUE} print the ggplot2 command in the console.}

\item{geom}{A way to specify ggplot geoms that are not aliased to gf functions.}

\item{show.help}{If \code{TRUE}, display some minimal help.  In particular,}

\item{position}{Position adjustment, either as a string, or the result of a call to a position adjustment function.
the help will show (a) which geom from \pkg{ggplot2} is used,
(b) how aesthetics are assigned based on \code{formula}, and (c)
any default values of arguments to the geom.}
}
\description{
These functions provide a formula interface to \code{ggplot2} and
various geoms. The formula interface is similar to the one used
for \pkg{lattice} plots, but more expressive, and consistent with
its use in modeling functions like \code{\link{lm}()}.  These functions
can be used to create a complete plot, or they can be chained together
using the pipe operator from \pkg{magrittr} to create multi-layer plots.
The functions generate a \code{ggplot2} command string which can be
displayed by setting \code{verbose = TRUE} as an argument.
}
\examples{
if (require(mosaicData)) {
  gf_histogram(..density.. ~ age, data = HELPrct, binwidth = 3, alpha = 0.6) \%>\%
    gf_function(fun = dnorm,
      args = list(mean = mean(HELPrct$age), sd = sd(HELPrct$age)),
      color = "red")
}
gf_point(Sepal.Length ~ Sepal.Width, data = iris) \%>\%
gf_fun(5 + 3 * cos(10 * x) ~ x)
# Utility bill is quadratic in month?
if (require(mosaic)) {
  f <- makeFun(lm(totalbill ~ poly(month, 2), data = Utilities))
  gf_point(totalbill ~ month, data = Utilities, alpha = 0.6) \%>\%
    gf_fun(f(m) ~ m, color = "red")
  }
mtcars.model <- lm(mpg ~ wt, data = mtcars)
gf_point(mpg ~ wt, data = mtcars) \%>\%
  gf_coefline(model = mtcars.model, alpha = 0.6) \%>\%
  gf_hline(yintercept = 20, color = "red", alpha = 0.4) \%>\%
  gf_vline(xintercept = 3, color = "navy", alpha = 0.4)
# Chaining in the data
mtcars \%>\% gf_point(mpg ~ wt, data = mtcars) \%>\%
  gf_coefline(model = mtcars.model, alpha = 0.6, col = "red")
}
\seealso{
\code{\link{gf_histogram}()},
\code{\link{gf_point}()},
\code{\link{gf_pointrange}()},
\code{\link{gf_refine}()}, and the other functions documented with these functions.
}
