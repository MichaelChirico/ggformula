% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gf_functions.R
\name{gf_hline}
\alias{gf_hline}
\alias{gf_vline}
\alias{gf_abline}
\alias{gf_coefline}
\title{gf_ functions with no formula part}
\usage{
gf_hline(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...)

gf_vline(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...)

gf_abline(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...)

gf_coefline(object = NULL, formula = NULL, coef = NULL, model = NULL,
  ...)
}
\arguments{
\item{object}{When chaining, this holds an object produced in the earlier portions
of the chain.  Most users can safely ignore this argument.
See details and examples.}

\item{formula}{ignored.}

\item{data}{A data frame with the variables to be plotted}

\item{geom}{A way to specify ggplot geoms that are not aliased to gf functions.}

\item{verbose}{If \code{TRUE} print the ggplot2 command in the console.}

\item{add}{If \code{TRUE} then construct just the layer with no frame.  The result
can be added to an existing frame.}

\item{...}{Other arguments such as \code{position="dodge"}.}

\item{coef}{A numeric vector of length at least 2, treated as intercept and slope.
Additional components, if any, are ignored (with a warning).}

\item{model}{An object with a method for \code{coef()} that returns a
numeric vector, the first two elements of which are intercept and slope.
This is equivalent to \code{coef = coef(model)}.}
}
\description{
These functions provide a formula interface to \code{ggplot2} and
various geoms. For plots with just one layer, the formula interface
is more compact and is consistent with modeling and \pkg{mosaic} notation.
The functions generate a \code{ggplot} command string which can be displayed by
setting \code{verbose = TRUE} as an argument.
}
\examples{
mtcars.model <- lm(mpg ~ wt, data = mtcars)
gf_point(mpg ~ wt, data = mtcars) \%>\%
  gf_coefline(model = mtcars.model, alpha = 0.6) \%>\%
  gf_hline(yintercept = 20, color = "red", alpha = 0.4) \%>\%
  gf_vline(xintercept = 3, color = "navy", alpha = 0.4)
# Chaining in the data
mtcars \%>\% gf_point(mpg ~ wt, data = mtcars) \%>\%
  gf_coefline(model = mtcars.model, alpha = 0.6, col = "red")

}
\seealso{
\code{\link{gf_point}()}, \code{\link{gf_histogram}()}, \code{\link{gf_pointrange}()}
}
