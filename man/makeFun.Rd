% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reexports.R
\name{makeFun}
\alias{makeFun}
\title{Create a function from a formula}
\usage{
makeFun(object, ...)
}
\arguments{
\item{object}{an object from which to create a function.  This should generally
be specified without naming.}

\item{...}{additional arguments in the form \code{var = val} that
set default values for the inputs to the function.}
}
\value{
a function
}
\description{
Provides an easy mechanism for creating simple "mathematical"
functions via a formula interface.
}
\details{
The definition of the function is given by the left side of a formula.  The right
side lists at least one of the inputs to the function.
The inputs to the function are all variables appearing on either the left
or right sides of the formula.  Those appearing in the right side will
occur in the order specified.  Those not appearing in the right side will
appear in an unspecified order.

When creating a function from a model created with \code{lm}, \code{glm}, or \code{nls},
the function produced is a wrapper around the corresponding version of \code{predict}.
This means that having variables in the model with names that match arguments of
\code{predict} will lead to potentially ambiguous situations and should be avoided.
}
\examples{
f <- makeFun( sin(x^2 * b) ~ x & y & a); f
g <- makeFun( sin(x^2 * b) ~ x & y & a, a = 2 ); g
h <- makeFun( a * sin(x^2 * b) ~ b & y, a = 2, y = 3); h
if (require(mosaicData)) {
  model <- lm( log(length) ~ log(width), data = KidsFeet)
  f <- makeFun(model, transformation = exp)
  f(8.4)
  head(KidsFeet, 1)
}

if (require(mosaicData)) {
  model <- lm(wage ~ poly(exper, degree = 2), data = CPS85)
  fit <- makeFun(model)
  if (require(ggformula)) {
    gf_point(wage ~ exper, data = CPS85) \%>\%
    gf_fun(fit(exper) ~ exper, color = "red")
  }
}
if (require(mosaicData)) {
model <- glm(wage ~ poly(exper, degree = 2), data = CPS85, family = gaussian)
fit <- makeFun(model)
  if (require(ggformula)) {
    gf_jitter(wage ~ exper, data = CPS85) \%>\%
    gf_fun(fit(exper) ~ exper, color = "red")
    gf_jitter(wage ~ exper, data = CPS85) \%>\%
    gf_function(fun = fit, color = "blue")
  }
}
if (require(mosaicData)) {
model <- nls( wage ~ A + B * exper + C * exper^2, data = CPS85, start = list(A = 1, B = 1, C = 1) )
fit <- makeFun(model)
  if (require(ggformula)) {
    gf_point(wage ~ exper, data = CPS85) \%>\%
    gf_fun(fit(exper) ~ exper, color = "red")
  }
}
}
