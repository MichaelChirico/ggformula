% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gf_functions.R
\name{gf_frame}
\alias{gf_frame}
\alias{gf_point}
\alias{gf_jitter}
\alias{gf_line}
\alias{gf_path}
\alias{gf_smooth}
\alias{gf_spline}
\alias{gf_rug}
\alias{gf_quantile}
\alias{gf_density_2d}
\alias{gf_density2d}
\alias{gf_contour}
\alias{gf_hex}
\alias{gf_boxplot}
\alias{gf_text}
\alias{gf_label}
\alias{gf_area}
\alias{gf_violin}
\alias{gf_spoke}
\alias{gf_step}
\alias{gf_tile}
\alias{gf_col}
\title{bivariate gf_ plotting functions}
\usage{
gf_frame(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_point(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_jitter(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_line(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_path(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_smooth(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_spline(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_rug(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_quantile(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_density_2d(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_density2d(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_contour(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_hex(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_boxplot(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_text(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_label(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_area(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_violin(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_spoke(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_step(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_tile(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_col(object = NULL, formula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)
}
\arguments{
\item{object}{When chaining, this holds an object produced in the earlier portions
of the chain.  Most users can safely ignore this argument.
See details and examples.}

\item{formula}{A formula describing the x and y variables and other aesthetics in
a form like \code{y ~ x + color:red + shape:sex + alpha:0.5}}

\item{data}{A data frame with the variables to be plotted}

\item{geom}{A way to specify ggplot geoms that are not aliased to gf functions.}

\item{verbose}{If \code{TRUE} print the ggplot2 command in the console.}

\item{add}{If \code{TRUE} then construct just the layer with no frame.  The result
can be added to an existing frame.}

\item{...}{Other arguments such as \code{position="dodge"}.}

\item{show.help}{If \code{TRUE}, display some minimal help.  In particular,
the help will show (a) which geom from \pkg{ggplot2} is used,
(b) how aesthetics are assigned based on \code{formula}, and (c)
any default values of arguments to the geom.}
}
\description{
These functions provide a formula interface to \code{ggplot2} and
various geoms. For plots with just one layer, the formula interface
is more compact and is consistent with modeling and mosaic notation.
The functions generate a \code{ggplot} command string which can be displayed by
setting \code{verbose = TRUE} as an argument.
}
\details{
These \code{gf_} functions are written to interact with ggplot objects.
The \code{object}
argument is part of this interaction system; the end user can ignore it.
}
\examples{
gf_point(mpg ~ hp + color:cyl + size:wt, data = mtcars, verbose = TRUE)
gf_point(mpg ~ hp + color:cyl + size:wt, data = mtcars) \%>\%
  gf_abline(~ color:"red" + slope:-0.10 + intercept:35)
gf_point(mpg ~ hp + color:cyl + size:wt, data = mtcars) \%>\%
  gf_abline(color = "red", slope = -0.10, intercept = 35)
gf_point(mpg ~ hp + color:cyl + size:wt, data = mtcars) \%>\%
  gf_abline(color = "red", slope = -0.10, intercept = 33:36) \%>\%
  gf_hline(color = "navy", yintercept = c(20, 25)) \%>\%
  gf_vline(color = "brown", xintercept = c(200, 300))
# use \%>\% for gf_* but + when returning to native ggplot functions
gf_line(mpg ~ hp + group:cyl, data = mtcars) \%>\%
  gf_point(mpg ~ hp + group:cyl) +
  facet_grid(~ am)
gf_text(Sepal.Length ~ Sepal.Width + label:Species + color:Species , data = iris)

# Chaining in the data
mtcars \%>\% gf_point(mpg ~ wt)

}
