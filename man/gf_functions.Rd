% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gf_functions.R
\name{gf_point}
\alias{gf_point}
\alias{gf_jitter}
\alias{gf_line}
\alias{gf_path}
\alias{gf_smooth}
\alias{gf_spline}
\alias{gf_rug}
\alias{gf_quantile}
\alias{gf_density_2d}
\alias{gf_density2d}
\alias{gf_contour}
\alias{gf_hex}
\alias{gf_boxplot}
\alias{gf_text}
\alias{gf_label}
\alias{gf_area}
\alias{gf_violin}
\alias{gf_spoke}
\alias{gf_step}
\alias{gf_tile}
\alias{gf_col}
\alias{gf_frame}
\title{Bivariate gf_ plotting functions}
\usage{
gf_point(object = NULL, gformula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_jitter(object = NULL, gformula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_line(object = NULL, gformula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_path(object = NULL, gformula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_smooth(object = NULL, gformula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_spline(object = NULL, gformula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_rug(object = NULL, gformula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_quantile(object = NULL, gformula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_density_2d(object = NULL, gformula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_density2d(object = NULL, gformula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_contour(object = NULL, gformula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_hex(object = NULL, gformula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_boxplot(object = NULL, gformula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_text(object = NULL, gformula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_label(object = NULL, gformula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_area(object = NULL, gformula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_violin(object = NULL, gformula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_spoke(object = NULL, gformula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_step(object = NULL, gformula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_tile(object = NULL, gformula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_col(object = NULL, gformula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)

gf_frame(object = NULL, gformula = NULL, data = NULL, geom = type,
  verbose = FALSE, add = inherits(object, c("gg", "ggplot")), ...,
  show.help = FALSE)
}
\arguments{
\item{object}{When chaining, this holds an object produced in the earlier portions
of the chain.  Most users can safely ignore this argument.
See details and examples.}

\item{gformula}{A formula describing the x and y variables and other aesthetics in
a form like \code{y ~ x + color:"red" + shape:sex + alpha:0.5}.
The environment of \code{gformula} determines
where the \pkg{ggplot2} code is evaluated.
See details.}

\item{data}{A data frame with the variables to be plotted}

\item{geom}{A way to specify ggplot geoms that are not aliased to gf functions.}

\item{verbose}{If \code{TRUE} print the ggplot2 command in the console.}

\item{add}{If \code{TRUE} then construct just the layer with no frame.  The result
can be added to an existing frame.}

\item{...}{Other arguments such as \code{position="dodge"}.}

\item{show.help}{If \code{TRUE}, display some minimal help.  In particular,
the help will show (a) which geom from \pkg{ggplot2} is used,
(b) how aesthetics are assigned based on \code{formula}, and (c)
any default values of arguments to the geom.}
}
\description{
These functions provide a formula interface to \code{ggplot2} and
various geoms. For plots with just one layer, the formula interface
is more compact and is consistent with modeling and mosaic notation.
The functions generate a \code{ggplot} command string which can be displayed by
setting \code{verbose = TRUE} as an argument.
}
\details{
Formulas must specify the \code{y} and \code{x} aesthetics in the form \code{y ~ x}.
Additional terms of the form \code{attribute::value} map \code{attribute}
to \code{value}.
Additional terms of the form \code{attribute:value} will map \code{attribute}
to \code{value} if \code{value} is the name of a variable in \code{data}, else
\code{attribute} will be set to the constant \code{value}.
Attributes can also be set by including optional arguments of the form
\code{attribute = value}.

In formulas of the form \code{A | B}, \code{B} will be used to form facets using
\code{link{facet_wrap}()} or \code{\link{facet_grid}()}.
This provides an alternative to
\code{\link{gf_facet_wrap}()} and
\code{\link{gf_facet_grid}()} that is terser and may feel more familiar to users
of \pkg{lattice}.

Evaluation of the \pkg{ggplot2} code occurs in the environment of \code{formula}.  This
will typically do the right thing when formulas are created on the fly, but might not
be the right thing if formulas created in one environment are used to create plots
in another.
}
\examples{
gf_point(show.help = TRUE)
gf_point(mpg ~ hp + color:cyl + size:wt, data = mtcars, verbose = TRUE)
gf_point(mpg ~ hp + color:cyl + size:wt, data = mtcars) \%>\%
  gf_abline(~ color:"red" + slope:-0.10 + intercept:35)
gf_point(mpg ~ hp + color:cyl + size:wt, data = mtcars) \%>\%
  gf_abline(color = "red", slope = -0.10, intercept = 35)
gf_point(mpg ~ hp + color:cyl + size:wt, data = mtcars) \%>\%
  gf_abline(color = "red", slope = -0.10, intercept = 33:36) \%>\%
  gf_hline(color = "navy", yintercept = c(20, 25)) \%>\%
  gf_vline(color = "brown", xintercept = c(200, 300))
# faceting -- two ways
gf_point(mpg ~ hp, data = mtcars) \%>\%
  gf_facet_wrap(~ am)
gf_point(mpg ~ hp + group:cyl | am, data = mtcars)
gf_point(mpg ~ hp + group:cyl | ~ am, data = mtcars)
gf_point(mpg ~ hp + group:cyl | am ~ ., data = mtcars)

gf_text(Sepal.Length ~ Sepal.Width + label:Species + color:Species , data = iris)

# Chaining in the data
mtcars \%>\% gf_point(mpg ~ wt)

}
\seealso{
\code{\link{gf_histogram}()}, \code{\link{gf_abline}()}, \code{\link{gf_pointrange}()}, \code{\link{gf_refine}()},
and the other functions documented with these functions.
}
